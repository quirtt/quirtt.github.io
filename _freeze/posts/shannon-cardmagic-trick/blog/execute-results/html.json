{
  "hash": "6dcde444b6589f6fed7110d80b0a0d57",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shannon's Card Magic Trick\"\nauthor: \"Himadri Mandal\"\ndate: \"2023-10-23\"\ncategories: [isi, statistics, math]\nformat: \n    html: \n        toc: true\n        html-math-method: mathjax\n        # css: styles.css\neditor: visual\nimage: \"pfp.jpg\"\nexecute:\n    freeze: auto\n---\n\n\n\n\nThis was my statistics project at ISI Sem 1. My team had: *Myself*, *Siddhartha*, *Ayan*, *Drishti*, *Aman*, *Mrittika*. Thanks to everyone for their efforts.\n\n## Setup\n\n------------------------------------------------------------------------\n\n**The magician sends you a deck of cards. You riffle shuffle it *three* times. You pick the card from the top and put it back in the deck, *somewhere*. You send the deck back to the magician. Can he find the chosen card?**\n\n------------------------------------------------------------------------\n\nWhat do you think? Well, I guess I wouldn't have asked this question if this weren't possible. Yep - it is possible to do it *reliably* well.\n\nI couldn't believe it myself. However, I think it will make more sense when I present the algorithm which was (apparently) discovered by Shannon. We will talk about this in part A. And implement it in part B. In the subsequent parts, we investigate what happens if we play with the setup a little bit.\n\n## Part A: Shannon's Algorithm\n\nRemember the original orientation of the deck of cards. Label the cards in this orientation $$ \n    \\{1,2,\\cdots,52\\}\n$$\n\nNow, we define ***rising sequence decomposition.*** To decompose a deck into its rising sequences we go through the following algorithm\n\n------------------------------------------------------------------------\n\n#### *Algorithm*: {#algorithm-risingseq}\n\n1.  Start with 1.\n\n2.  Find the next number, **If** it is *after* the previous number, goto **step 2**. **Else**, continue.\n\n3.  This is a rising sequence. Start with the next unconsidered number, and goto **step 2**.\n\n------------------------------------------------------------------------\n\nFor example, if the deck is $\\{4,3,5,1,2\\}$. we go $1\\to 2 \\implies (1,2)$, $3 \\implies (3)$, $4 \\to 5 \\implies (4,5)$, thus $\\{4,3,5,1,2\\} \\implies (1,2)(3)(4,5)$.\n\nWell, it's time to reveal the secret algorithm that Shannon came up with:\n\n------------------------------------------------------------------------\n\n#### *Algorithm*:\n\n**Perform the rising sequence decomposition of the final deck. There exists a unique rising sequence singleton in this deck - this is the picked card.**\n\n------------------------------------------------------------------------\n\nOur team implemented the algorithm in **R** and the results were extremely satisfactory.\n\n## Part B: Implementation\n\n#### Version 1: Distribution fitting\n\nWe first cut a standard deck 100 times (LOL IN REAL LIFE) and we recorded the number of cards in the smaller deck (Let this vector be $X$). I was going to fit the Gaussian distribution over the vector $c(X,52-X)$.\n\nHowever, I noticed my skill issue when **\\@Ayan** pointed out that this dataset would not be **IID**. To fix this issue, I tossed a coin 100 times and picked either $x \\text{ or } 52-x$ for every $x \\in X$. Fitting the Gaussian distribution over this we ended up with\n\n``` r\nfloor(rnorm(1, mean=25.78, sd = 2.3046))\n```\n\nEverything else was fairly easy to implement, I had quite some fun while making this. This empirically confirms that the algorithm works with pretty high probabilities $\\left(\\sim 91\\%\\right)$.\n\nWell, I know the code is probably not human-readable (moreso because it was written by me, lol), so, I work with the following functions: `RiffleShuffle`, `Switch`, `RisingSingleton`, `Process`, and `SumCalculator`. Here's what's special about each of them:\n\n-   `RiffleShuffle(Deck):` This first splits the deck according to the fitted distribution. Then, it stores a counter of the number of cards in the Left and Right hands (`LeftHand`, `RightHand`). My assumption is: the probability that the \"next\" card is from the Left hand is $\\frac{\\texttt{LeftHand}}{\\texttt{LeftHand + RightHand}}$ and similarly for the Right hand.\n\n-   `Switch(Deck, c(x, y)):` The $x^{\\text{th}}$ index card is moved to the $y^{\\text{th}}$ index in the deck.\n\n-   `RisingSingleton(Deck):` Well, this is interesting. I first create the `index` array which stores the location of the $i^{\\text{th}}$ card in the Deck. Then - note that if there is a RisingSingleton: there is an element $x$ such that $\\texttt{index}[x+1] < \\texttt{index}[x]$ and $\\texttt{index}[x-1] > \\texttt{index}[x]$. The weird condition in the code is to deal with the edgecases, so don't worry about that. At last, it counts the total number of rising singletons and returns the pair $(\\texttt{(Sum(RisingSingleton) == 1)}, \\texttt{LastSingleton})$.\n\n-   `Process:` This simulates the whole setup, and returns the boolean $(\\texttt{(Sum(RisingSingleton) == 1) AND (LastSingleton == CorrectCard)})$ which amounts to checking whether we get what we want.\n\n-   `SumCalculator:` This function carries out `Process` 10000 times and finds the percentage of times it gets the card right.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Cards is the permutation _Sigma_.\n\nDataset = c(26,26,24,26,26,25,26,26,25,23,25,26,24,26,24,26,26,23,20,26,23,22,25,23,26,26,23,25,23,25,25,25,25,26,25,23,25,24,26,25,26,23,26,23,26,24,26,24,25,24,25,23,24,25,22,21,25,25,25,21,23,24,23,21,26,25,25,24,24,25,24,25,24,24,23,25,21,25,26,26,23,25,25,23,21,24,21,25,25,22,24,25,26,23,24,25,19,25,23,25)\n\n\nRiffleShuffle <- function(Cards){\n  ### Riffle shuffles the vector of Cards using\n  ### L/(L+R), R/(L+R) probabilities to each hand. \n  NewDeck = vector()\n  split = floor(rnorm(1, mean=25.78, sd = 2.3046))\n\n  LeftHand = Cards[1:split]\n  RightHand = Cards[(split+1):52]\n  for(x in 1:52){\n    L <- length(LeftHand)\n    R <- length(RightHand)\n    hand = sample(c(\"L\", \"R\"), 1, prob=c(L,R))\n    \n    if(hand == \"L\"){\n      card = LeftHand[1]\n      LeftHand <- if (L != 1) LeftHand[2:L] else vector()\n      NewDeck = append(NewDeck, card)\n    }\n    else{\n      card = RightHand[1]\n      RightHand <- if (R != 1) RightHand[2:R] else vector()\n      NewDeck = append(NewDeck, card)\n    }\n  }\n  \n  return(NewDeck)\n}\n\nSwitch <- function(Cards, vals) {\n  # 1 <= y <= 52\n  # 1 <= x <= 52\n  # Logic: xth index card is moved at yth index\n  x = vals[1]\n  y = vals[2]\n  NewCards = vector()\n  for (i in 1:length(Cards)) {\n    if (i != x) {\n      NewCards = append(NewCards, Cards[i])\n    }\n  }\n  if (y != 1) {\n    if (y != 52) {\n      NewCards = append(NewCards, Cards[x], after = y - 1)\n    } else {\n      NewCards = append(NewCards, Cards[x])\n    }\n  } else {\n    NewCards = append(Cards[x], NewCards)\n  }\n  return(NewCards)\n}\n\nRisingSingleton <- function(array){\n  ### Checks if there is a unique Rising Singleton and returns the singleton.\n  index = numeric(0)\n  for (i in 1:52){\n    index[array[i]] = i\n  }\n  Sum = 0\n  SingletonCard = 0\n  for (i in 1:52){\n    if((index[i] >= index[min((i+1), 52)]) & (index[i] <= index[max((i-1), 1)])){\n      Sum = Sum + 1\n      SingletonCard = i\n    }\n  }\n  return(c((Sum == 1), SingletonCard))\n}\n\nProcess <- function(Cards){\n  ### Performs the whole process and outputs whether there\n  ### is a unique Rising Singleton\n  Cards = RiffleShuffle(Cards)\n  Cards = RiffleShuffle(Cards)\n  Cards = RiffleShuffle(Cards)\n  \n  vals = c(1, rbinom(1, 52, 0.5))\n  PickedCard = Cards[1]\n  Cards = Switch(Cards, vals)\n\n  RSCheck = RisingSingleton(Cards)\n  return((RSCheck[1])&(RSCheck[2] == PickedCard))\n}\n\nSumCalculator <- function(Cards){\n  ### Simulates Process 10000 and counts how many times  \n  ### there is a unique Rising Singleton which is also indeed\n  ### the picked card.\n  Sum = 0\n  for(i in 1:10000){\n    Sum = Sum + Process(Cards)\n  }\n  return(Sum)\n}\n\nCards = 1:52\nSumCalculator(Cards)/10000 * 100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 91.61\n```\n\n\n:::\n:::\n\n\n\n\nAlso, **\\@Siddhartha** implemented this in Python\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n\nimport random\ndef riffle_shuffle(deck):\n    cut_index = int(np.random.normal(25.78, 2.3046))\n    cut_index = max(1, min(cut_index, 51))\n    left_hand = deck[:cut_index]\n    right_hand = deck[cut_index:]\n    shuffled_deck = []\n    while left_hand or right_hand:\n        if len(right_hand) > 0 and np.random.rand() <= len(right_hand) / (len(left_hand) + len(right_hand)):\n            shuffled_deck.append(right_hand.pop(0))\n        else:\n            shuffled_deck.append(left_hand.pop(0))\n    return shuffled_deck\n\ndef swap_first_card(deck):\n    index = int(list(np.random.binomial(52, 0.5, 1))[0])\n    index = min(index, 52)\n    deck[0]=deck.pop(0)\n    deck.insert(index,deck[0])\ndef rising_singleton(array):\n    # Create an index array to store the positions of values in the input array\n    index = [0] * 52\n\n    # Populate the index array with the positions of values in the input array\n    for i in range(52):\n        index[array[i] - 1] = i\n\n    Sum = 0\n    SingletonCard = 0\n\n    # Check if there is a unique Rising Singleton\n    for i in range(52):\n        if (index[i] >= index[min(i + 1, 51)]) and (index[i] <= index[max(i - 1, 0)]):\n            Sum += 1\n            SingletonCard = i + 1\n\n    return [Sum == 1, SingletonCard]\n\nunique_singleton_count = 0\n\n# Repeat the process 10,000 times\nfor x in range(10000):\n    deck = list(range(1,53))\n    for y in range(3):\n        deck = riffle_shuffle(deck)\n    swap_first_card(deck)\n    is_unique_singleton,z = rising_singleton(deck)\n    if is_unique_singleton:\n        unique_singleton_count += 1\n\n# Percentage of unique singletons\nprint(\"Percentage: \", unique_singleton_count/100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPercentage:  92.22\n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n#### Version 2: Splitting using $\\operatorname{Bin}\\left(52, \\frac{1}{2}\\right)$\n\n``` r\n#Cards is the permutation _Sigma_.\n\nRiffleShuffle <- function(Cards){\n  ...\n  split = rbinom(1, 52, 1/2)\n  ...\n}\n```\n\nWhere I only change how I perform the split. This results in about $\\left(89\\%\\right)$.\n\n## Part C: Playing Around\n\nWe can now tinker with the setup to see what happens when we change things a little bit. Note that we picked the card from the top and put it back *somewhere*. It makes sense to ask: what happens when we pick it from *anywhere*? Well, here's a plot in **R** which showcases what happens when we vary the location of the picked card.\n\n![](picked_card_vary.jpg){fig-align=\"center\" width=\"459\"}\n\nWhich makes sense because the way we are choosing the position to put the card into is a function symmetric around 26.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}