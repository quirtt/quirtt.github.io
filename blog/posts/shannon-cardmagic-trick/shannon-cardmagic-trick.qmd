---
title: "Shannon's Card Magic Trick"
author: "Himadri Mandal"
date: "2023-10-23"
categories: [isi, statistics, math]
format: 
    html: 
        toc: true
        html-math-method: mathjax
        # css: styles.css
editor: visual
image: "pfp.jpg"
---

## Setup

------------------------------------------------------------------------

**The magician sends you a deck of cards. You riffle shuffle it *three* times. You pick the card from the top and put it back in the deck, *somewhere*. You send the deck back to the magician. Can he find the chosen card?**

------------------------------------------------------------------------

What do you think? Well, I guess I wouldn't have asked this question if this weren't possible. Yep - it is possible to do it *reliably* well.

I couldn't believe it myself. However, I think it will make more sense when I present the algorithm which was (apparently) discovered by Shannon. We will talk about this in part A. And implement it in part B. In the subsequent parts, \<\< we propose an algorithm that performs *better* in this particular setup, we also talk about more general setups \>\>.

## Part A: Shannon's Algorithm

Remember the original orientation of the deck of cards. Label the cards in this orientation $$ 
    \{1,2,\cdots,52\}
$$

Now, we define ***rising sequence decomposition.*** To decompose a deck into its rising sequences we go through the following algorithm

------------------------------------------------------------------------

#### *Algorithm*: {#algorithm-risingseq}

1.  Start with 1.

2.  Find the next number, **If** it is *after* the previous number, goto **step 2**. **Else**, continue.

3.  This is a rising sequence. Start with the next unconsidered number, and goto **step 2**.

------------------------------------------------------------------------

For example, if the deck is $\{4,3,5,1,2\}$. we go $1\to 2 \implies (1,2)$, $3 \implies (3)$, $4 \to 5 \implies (4,5)$, thus $\{4,3,5,1,2\} \implies (1,2)(3)(4,5)$.

Well, it's time to reveal the secret algorithm that Shannon came up with:

------------------------------------------------------------------------

#### *Algorithm*:

**Perform the rising sequence decomposition of the final deck. There exists a unique rising sequence singleton in this deck - this is the picked card.**

------------------------------------------------------------------------

Our team implemented the algorithm in **R** and the results were extremely satisfactory.

## Part B: Implementation

#### Version 1: Distribution fitting

We first cut a standard deck 100 times (LOL IN REAL LIFE) and we recorded the number of cards in the smaller deck (Let this vector be $X$). I was going to fit the Gaussian distribution over the vector $c(X,52-X)$.

However, I noticed my skill issue when **\@Ayan** pointed out that this dataset would not be **IID**. To fix this issue, I tossed a coin 100 times and picked either $x \text{ or } 52-x$ for every $x \in X$. Fitting the Gaussian distribution over this we ended up with

``` r
floor(rnorm(1, mean=25.78, sd = 2.3046))
```

Everything else was fairly easy to implement, I had quite some fun while making this. This empirically confirms that the algorithm works with pretty high probabilities $\left(\sim 91\%\right)$.

```{r}
#Cards is the permutation _Sigma_.

Dataset = c(26,26,24,26,26,25,26,26,25,23,25,26,24,26,24,26,26,23,20,26,23,22,25,23,26,26,23,25,23,25,25,25,25,26,25,23,25,24,26,25,26,23,26,23,26,24,26,24,25,24,25,23,24,25,22,21,25,25,25,21,23,24,23,21,26,25,25,24,24,25,24,25,24,24,23,25,21,25,26,26,23,25,25,23,21,24,21,25,25,22,24,25,26,23,24,25,19,25,23,25)


RiffleShuffle <- function(Cards){
  ### Riffle shuffles the vector of Cards using
  ### L/(L+R), R/(L+R) probabilities to each hand. 
  NewDeck = vector()
  split = floor(rnorm(1, mean=25.78, sd = 2.3046))

  LeftHand = Cards[1:split]
  RightHand = Cards[(split+1):52]
  for(x in 1:52){
    L <- length(LeftHand)
    R <- length(RightHand)
    hand = sample(c("L", "R"), 1, prob=c(L,R))
    
    if(hand == "L"){
      card = LeftHand[1]
      LeftHand <- if (L != 1) LeftHand[2:L] else vector()
      NewDeck = append(NewDeck, card)
    }
    else{
      card = RightHand[1]
      RightHand <- if (R != 1) RightHand[2:R] else vector()
      NewDeck = append(NewDeck, card)
    }
  }
  
  return(NewDeck)
}

Switch <- function(Cards, vals) {
  # 1 <= y <= 52
  # 1 <= x <= 52
  # Logic: xth index card is moved at yth index
  x = vals[1]
  y = vals[2]
  NewCards = vector()
  for (i in 1:length(Cards)) {
    if (i != x) {
      NewCards = append(NewCards, Cards[i])
    }
  }
  if (y != 1) {
    if (y != 52) {
      NewCards = append(NewCards, Cards[x], after = y - 1)
    } else {
      NewCards = append(NewCards, Cards[x])
    }
  } else {
    NewCards = append(Cards[x], NewCards)
  }
  return(NewCards)
}

RisingSingleton <- function(array){
  ### Checks if there is a unique Rising Singleton and returns the singleton.
  index = numeric(0)
  for (i in 1:52){
    index[array[i]] = i
  }
  Sum = 0
  SingletonCard = 0
  for (i in 1:52){
    if((index[i] >= index[min((i+1), 52)]) & (index[i] <= index[max((i-1), 1)])){
      Sum = Sum + 1
      SingletonCard = i
    }
  }
  return(c((Sum == 1), SingletonCard))
}

Process <- function(Cards){
  ### Performs the whole process and outputs whether there
  ### is a unique Rising Singleton
  Cards = RiffleShuffle(Cards)
  Cards = RiffleShuffle(Cards)
  Cards = RiffleShuffle(Cards)
  
  vals = c(1, rbinom(1, 52, 0.5))
  PickedCard = Cards[1]
  Cards = Switch(Cards, vals)

  RSCheck = RisingSingleton(Cards)
  return((RSCheck[1])&(RSCheck[2] == PickedCard))
}

SumCalculator <- function(Cards){
  ### Simulates Process 10000 and counts how many times  
  ### there is a unique Rising Singleton which is also indeed
  ### the picked card.
  Sum = 0
  for(i in 1:10000){
    Sum = Sum + Process(Cards)
  }
  return(Sum)
}
```

------------------------------------------------------------------------

#### Version 2: Splitting using $\operatorname{Bin}(52, \frac{1}{2}\}$

``` r
#Cards is the permutation _Sigma_.

RiffleShuffle <- function(Cards){
  ...
  split = rbinom(1, 52, 1/2)
  ...
}
```

Where I only change how I perform the split. This results in about $\left(89\%\right)$.

I would like to prove the probabilistic bound. I am also very interested in the use of information theory in this problem but since I am busy with Analysis at the moment, I will postpone that for a while.